/*** SQL 2 Homework ***/


/** Part 1 Answer following questions **/

-- What is a result set?
-- Result set is a new table set that is generated by our query statement based on the data retrieved from the database.

-- What is the difference between Union and Union All?
-- Union combine two or more result set from the SELECT statements into one column, removing any duplicate rows.
-- Union ALL conbine two or more result set from the SELECT statements and all data will be listed out. 

-- What are the other Set Operators SQL Server has?
-- UNION, UNION ALL, INTERSECT and EXCEPT

-- What is the difference between Union and Join?
-- UNION is a set operation and JOIN is a relational opration.
-- UNION combines a set of the data that are results from SELECT. Require same structure.
-- JOIN combines rows from two or more tables based on a related column between two table.

-- What is the difference between INNER JOIN and FULL JOIN?
-- INNER JOIN selects data that have matching values in both table
-- FULL JOIN returns all records if there are matching values between both tables
-- So inner returns the one that relap with the other column information
-- Full join join the repeated data but also list out the others, missing data will be null

-- What is difference between left join and outer join
-- Left join will return the matching values in both table also the remaining table set from SELECT
-- Outer join return both data besides the matching values

-- What is cross join?
-- Key word for paired comination of each row of the first table with each row of the second table.

-- What is the difference between WHERE clause and HAVING clause?
-- Does have the same purpose to filter data table
-- Where is applied before grouping, it affecting individual rows
-- Having is applied after groupling, affecting groups of rows
-- Where filters rows
-- Having filters groups

-- Can there be multiple group by columns?
-- Yes


/** Part 2 Write queries for following scenarios **/

/* Select master Database */
USE Northwind
GO
--SELECT * FROM Products;

/* Query 1
How many products can you find in the Products table?
*/
SELECT COUNT(DISTINCT ProductName)
FROM Products;

/* Query 2
Write a query that retrieves the number of products in the Products table that are out of stock. 
The rows that have 0 in column UnitsInStock are considered to be out of stock. 
*/
SELECT COUNT (*) AS OutOfStockCount
FROM Products
WHERE UnitsInStock = 0;

/* Query 3
How many Products reside in each Category? Write a query to display the results with the following titles.
CategoryID CountedProducts
---------- ---------------
*/
SELECT CategoryID, COUNT(*) AS CountedProducts
FROM Products
GROUP BY CategoryID

/* Query 4
How many products that are not in category 6. 
*/
SELECT COUNT(*) AS CountedProducts
FROM Products
WHERE CategoryID <> 6;

/* Query 5
Write a query to list the sum of products UnitsInStock in Products table.
*/
SELECT SUM(UnitsInStock) as SumOfUnitsInStock
FROM Products

/* Query 6 
Write a query to list the sum of products by category in the Products table 
and UnitPrice over 25 and limit the result to include just summarized quantities larger than 10.
CategoryID			TheSum
-----------        ----------
*/
SELECT CategoryID, SUM(UnitsInStock) AS TheSum
FROM Products
WHERE UnitPrice > 25
GROUP BY CategoryID
HAVING SUM(UnitsInStock) > 10;

/* Query 7
Write a query to list the sum of products with productID by category in the Products table 
and UnitPrice over 25 and limit the result to include just summarized quantities larger than 10.
ProductID  CategoryID	  TheSum
---------- -----------    -----------
*/
SELECT ProductID, CategoryID, SUM(UnitsInStock) AS TheSum
FROM Products
WHERE UnitPrice > 25
GROUP BY ProductID, CategoryID
HAVING SUM(UnitsInStock) > 10

/* Query 8
Write the query to list the average UnitsInStock for products 
where column CategoryID has the value of 2 from the table Products.
*/
SELECT CategoryID, AVG(UnitsInStock) AS AverageUnitsInStock
FROM Products
WHERE CategoryID = 2
GROUP BY CategoryID;

/* Query 9
Write query to see the average quantity of products by Category from the table Products.
CategoryID      TheAvg
----------    -----------
*/
SELECT CategoryID, AVG(UnitsInStock) AS TheAvg
FROM Products
Group BY CategoryID;


/* Query 10
Write query  to see the average quantity  of  products by Category and product id
excluding rows that has the value of 1 in the column Discontinued from the table Products
ProductID   CategoryID   TheAvg
----------- ----------   -----------
*/
SELECT ProductID, CategoryID, AVG(UnitsInStock) AS TheAvg
FROM Products
WHERE Discontinued <> 1
GROUP BY ProductID, CategoryID

/* Query 11
List the number of members (rows) and average UnitPrice in the Products table. 
This should be grouped independently over the SupplierID and the CategoryID column. Exclude the discountinued products (discountinue = 1)
SupplierID      CategoryID		TheCount   		AvgPrice
--------------	------------ 	----------- 	---------------------
*/
SELECT SupplierID, CategoryID, COUNT(*) AS TheCount, AVG(UnitPrice) AS AvgPrice
FROM Products
WHERE Discontinued <> 1
GROUP BY SupplierID, CategoryID


-- Joins
-- Using Northwnd Database: (Use aliases for all the Joins)
-- SELECT * FROM Territories, Region

/* Query 12
Write a query that lists the Territories and Regions names from Territories and Region tables. 
Join them and produce a result set similar to the following. 
Territory           Region
---------         ----------------------
*/
SELECT Territories.TerritoryDescription AS Territory, Region.RegionDescription AS Region
FROM Territories 
INNER JOIN Region ON Territories.RegionID = Region.RegionID


/* Query 13
Write a query that lists the Territories and Regions names from Territories and Region tables. 
and list the Territories filter them by Eastern and Northern. Join them and produce a result set similar to the following.
Territory           Region
---------     ----------------------
*/
SELECT Territories.TerritoryDescription AS Territory, Region.RegionDescription AS Region
FROM Territories
INNER JOIN Region ON Territories.RegionID = Region.RegionID
WHERE Region.RegionDescription = 'Eastern' OR Region.RegionDescription = 'Northern'
-- WHERE Region.RegionDescription IN ('Eastern', 'Northern')


/* Query 14
List all Products that has been sold at least once in last 25 years.
*/
SELECT Products.ProductName
FROM Products
INNER JOIN [Order Details]
ON Products.ProductID = [Order Details].ProductID
INNER JOIN Orders
ON [Order Details].OrderID = Orders.OrderID
WHERE Orders.OrderDate <= DATEADD(YEAR, -25, GETDATE())
GROUP BY Products.ProductName
-- 老师这个我用了chatgpt，实在太混乱


/* Query 15
List top 5 locations (Zip Code) where the products sold most.
*/

-- SELECT * FROM Orders
-- SELEVT * FROM [Order Details]

SELECT TOP 5 Orders.ShipPostalCode, SUM([Order Details].Quantity) AS TotalSold
FROM Orders
INNER JOIN [Order Details]
ON Orders.OrderID = [Order Details].OrderID
WHERE Orders.ShipPostalCode IS NOT NULL
GROUP BY Orders.ShipPostalCode
ORDER BY TotalSold DESC

/* Query 16
List top 5 locations (Zip Code) where the products sold most in last 25 years.
*/
SELECT TOP 5 Orders.ShipPostalCode, SUM([Order Details].Quantity) AS TotalSold
FROM Orders
INNER JOIN [Order Details]
ON Orders.OrderID = [Order Details].OrderID
WHERE Orders.ShipPostalCode IS NOT NULL AND Orders.OrderDate <= DATEADD(YEAR, -25, GETDATE())
GROUP BY Orders.ShipPostalCode
ORDER BY TotalSold DESC


/* Query 17
List all city names and number of customers in that city. 
*/
-- SELECT * FROM Customers

SELECT City AS [City Name], COUNT(*) AS [Number of Customers]
FROM Customers
GROUP BY City


/* Query 18
List city names which have more than 2 customers, and number of customers in that city 
*/
SELECT City AS [City Name], COUNT(*) AS [Number of Customers]
FROM Customers
GROUP BY City
HAVING COUNT(*) > 2

/* Query 19
List the names of customers who placed orders after 1/1/98 with order date.
*/
SELECT CompanyName
FROM Customers
INNER JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
WHERE Orders.OrderDate > '1/1/98'


/* Query 20
List the names of all customers with most recent order dates 
*/
SELECT * FROM Customers
SELECT * FROM Orders

SELECT Customers.CompanyName, MAX(Orders.OrderDate) AS [Most Recent Order]
FROM Customers
INNER JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.CompanyName
-- 这里的GROUP BY, 不理解为什么要groupbycompanyname，我本来想的是GROUPBY [Orders.customerID]


/* Query 21
Display the names of all customers along with the count of products they bought
*/
SELECT Customers.CompanyName AS [Compamy Name], COUNT([Order Details].ProductID) AS [Count Of Products]
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID
GROUP BY Customers.CompanyName
ORDER BY [Count Of Products];





/* Query 22
Display the customer ids who bought more than 100 Products with count of products.
*/
SELECT Orders.CustomerID AS [Customer IDS], SUM([Order Details].Quantity) AS [Count Of Products]
FROM Orders
JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID
GROUP BY Orders.CustomerID
HAVING SUM([Order Details].Quantity) > 100




/* Query 23
List all of the possible ways that suppliers can ship their products. Display the results as below
Supplier Company Name   	Shipping Company Name
----------------------      ----------------------------------
*/
SELECT Suppliers.CompanyName AS [Supplier Company Name], Shippers.CompanyName AS [Shipping Company Name]
FROM Suppliers
JOIN Products ON Suppliers.SupplierID = Products.SupplierID
JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
JOIN Orders ON Orders.OrderID = [Order Details].OrderID
JOIN Shippers ON Orders.ShipVia = Shippers.ShipperID
ORDER BY Suppliers.CompanyName


/* Query 24
Display the products order each day. Show Order date and Product Name.
*/
SELECT Orders.OrderDate AS [Order Date], Products.ProductName AS [Product Name]
FROM Orders
JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID
JOIN Products ON [Order Details].ProductID = Products.ProductID
ORDER BY Orders.OrderDate


/* Query 25
Displays pairs of employees who have the same job title.
*/
SELECT e1.FirstName + ' ' + e1.LastName AS [Employee #1], e2.FirstName + ' ' + e2.LastName AS [Employee #2], e1.Title AS [Job Title]
FROM Employees e1
JOIN Employees e2 ON e1.Title = e2.Title
WHERE e1.EmployeeID < e2.EmployeeID
ORDER BY e1.Title

/* Query 26
Display all the Managers who have more than 2 employees reporting to them.
*/
SELECT e1.FirstName + ' ' + e1.LastName AS [Managers]
FROM Employees e1
JOIN Employees e2 ON e1.EmployeeID = e2.ReportsTo
GROUP BY e1.FirstName, e1.LastName
HAVING COUNT(e2.EmployeeID) > 2


/* Query 27
Display the customers and suppliers by city. The results should have the following columns
City 
Name 
Contact Name,
Type (Customer or Supplier)
*/
SELECT City AS [City Name], ContactName AS [Contact Name], 'Customer' AS [Type]
FROM Customers
UNION
SELECT City AS [City Name], ContactName AS [Contact Name], 'Suppliers' AS [Type]
FROM Suppliers
ORDER BY City


/* Query 28
For example, you have two exactly the same tables T1 and T2 with two columns F1 and F2
	F1	F2
	--- ---
	1	2
	2	3
	3	4
Please write a query to inner join these two tables and write down the result of this query.
*/
SELECT * FROM T1
INNER JOIN T2
ON T1.F1=T2.F1 AND T1.F2=T2.F2


/* Result: 
	F1	F2	F1	F2
	--- ---	---	---
	1	2	1	2
	2	3	2	3
	3	4	3	4
*/

/* Query 29
Based on above two table, Please write a query to left outer join these two tables and write down the result of this query.
*/
SELECT * FROM T1
LEFT OUTER JOIN T2
ON T1.F1 = T2.F1 AND T1.F2 = T2.F2

/* Result: 
	F1	F2	F1	F2
	--- ---	---	---
	1	2	1	2
	2	3	2	3
	3	4	3	4
*/
